/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.4).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.visable.messagingservice.controller;

import com.visable.messagingservice.model.MessageDto;
import com.visable.messagingservice.model.MessagesDto;
import com.visable.messagingservice.model.ProblemDto;
import java.util.UUID;
import com.visable.messagingservice.model.UserDto;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import javax.validation.constraints.*;

@Validated
@Api(value = "MessagingService", description = "the MessagingService API")
public interface MessagingServiceApi {

    default MessagingServiceApiDelegate getDelegate() {
        return new MessagingServiceApiDelegate() {};
    }

    @ApiOperation(value = "Create user", nickname = "createUser", notes = "Create new User", tags={ "Messaging Service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation") })
    @RequestMapping(value = "/user",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> createUser(@ApiParam(value = "User object that needs to be added."  )  @Valid @RequestBody UserDto userDto) {
        return getDelegate().createUser(userDto);
    }


    @ApiOperation(value = "Get All Received Messages", nickname = "getReceivedMessages", notes = "Get All Received Messages", response = MessagesDto.class, tags={ "Messaging Service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = MessagesDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDto.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ProblemDto.class) })
    @RequestMapping(value = "/getReceivedMessages",
        produces = { "application/json", "application/problem+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<MessagesDto> getReceivedMessages(@ApiParam(value = "Your User Id" ,required=true) @RequestHeader(value="userId", required=true) UUID userId,@Min(1) @Max(2147483647) @ApiParam(value = "The page number of the records to retrieve. Default value is 1", defaultValue = "1") @Valid @RequestParam(value = "pageNumber", required = false, defaultValue="1") Integer pageNumber,@Min(1) @Max(25) @ApiParam(value = "The max number of records to retrieve per page. Default value is 10, max value is 25.", defaultValue = "10") @Valid @RequestParam(value = "pageSize", required = false, defaultValue="10") Integer pageSize) {
        return getDelegate().getReceivedMessages(userId, pageNumber, pageSize);
    }


    @ApiOperation(value = "Get All Received Messages from particular user", nickname = "getReceivedMessagesFromParticularUser", notes = "Get All Received Messages from particular user", response = MessagesDto.class, tags={ "Messaging Service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = MessagesDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDto.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ProblemDto.class) })
    @RequestMapping(value = "/getReceivedMessagesFromParticularUser/{userIdToSearchBy}",
        produces = { "application/json", "application/problem+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<MessagesDto> getReceivedMessagesFromParticularUser(@ApiParam(value = "Your User Id" ,required=true) @RequestHeader(value="userId", required=true) UUID userId,@ApiParam(value = "User that you want to get his sent messages to you",required=true) @PathVariable("userIdToSearchBy") UUID userIdToSearchBy,@Min(1) @Max(2147483647) @ApiParam(value = "The page number of the records to retrieve. Default value is 1", defaultValue = "1") @Valid @RequestParam(value = "pageNumber", required = false, defaultValue="1") Integer pageNumber,@Min(1) @Max(25) @ApiParam(value = "The max number of records to retrieve per page. Default value is 10, max value is 25.", defaultValue = "10") @Valid @RequestParam(value = "pageSize", required = false, defaultValue="10") Integer pageSize) {
        return getDelegate().getReceivedMessagesFromParticularUser(userId, userIdToSearchBy, pageNumber, pageSize);
    }


    @ApiOperation(value = "Get All Sent Messages", nickname = "getSentMessages", notes = "Get All Sent Messages", response = MessagesDto.class, tags={ "Messaging Service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = MessagesDto.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ProblemDto.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ProblemDto.class) })
    @RequestMapping(value = "/getSentMessages",
        produces = { "application/json", "application/problem+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<MessagesDto> getSentMessages(@ApiParam(value = "Your User Id" ,required=true) @RequestHeader(value="userId", required=true) UUID userId,@Min(1) @Max(2147483647) @ApiParam(value = "The page number of the records to retrieve. Default value is 1", defaultValue = "1") @Valid @RequestParam(value = "pageNumber", required = false, defaultValue="1") Integer pageNumber,@Min(1) @Max(25) @ApiParam(value = "The max number of records to retrieve per page. Default value is 10, max value is 25.", defaultValue = "10") @Valid @RequestParam(value = "pageSize", required = false, defaultValue="10") Integer pageSize) {
        return getDelegate().getSentMessages(userId, pageNumber, pageSize);
    }


    @ApiOperation(value = "send Message", nickname = "sendMessage", notes = "send Message", tags={ "Messaging Service", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation") })
    @RequestMapping(value = "/sendMessage",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> sendMessage(@ApiParam(value = "Your User Id" ,required=true) @RequestHeader(value="userId", required=true) UUID userId,@ApiParam(value = "Message object details to be sent."  )  @Valid @RequestBody MessageDto messageDto) {
        return getDelegate().sendMessage(userId, messageDto);
    }

}
